import os
import datetime
import requests
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from env import TOKEN
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import logging
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, InputFile

start_i1 = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data='start_i1')
start_i2 = InlineKeyboardButton("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data='start_i2')
keyboard_location_inline = InlineKeyboardMarkup().insert(start_i1).insert(start_i2)

start_b1 = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data='start_i1')
start_b2 = InlineKeyboardButton("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", callback_data='start_i2')
keyboard_location_Reply = InlineKeyboardMarkup().insert(start_i1).insert(start_i2)

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

code_to_smile = {
    "—è—Å–Ω–æ": "‚òÄ",
    "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚õÖ",
    "–¥–æ–∂–¥—å": "üåßüíß‚òî",
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": "üíß‚òî",
    "–≥—Ä–æ–∑–∞": "üå©‚ö°",
    "—Å–Ω–µ–≥": "üå®‚ùÑ",
    "—Ç—É–º–∞–Ω": "üå´üå´",
    "–ø–∞—Å–º—É—Ä–Ω–æ": "‚òÅ‚òÅ",
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": "üå§üå§",
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": "‚òÅ‚òÄ"
}


@dp.message_handler(commands=['start'], state='*')
async def start(message, state):
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è MegaWeatherBot!\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É,"
                                            " –Ω–∞–ø–∏—à–∏ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
                           reply_markup=keyboard_location_inline)
    await state.set_state("location")
    await bot.send_message(message.chat.id, f'{state}')


@dp.message_handler(state="location_point")
async def get_weather(message: types.Message, state):
    city = message.text.lower()
    response = requests.get(
        f"https://api.openweathermap.org/data/2.5/weather?&appid=a009c9ca842efc851186d74154eba196&lang=ru&units=metric&q={city}")
    data = response.json()
    print(data)
    city = city[0].upper() + city[1:]
    if int(str(response)[11:-2]) == 404:
        await bot.send_message(message.chat.id, "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞")
    else:
        weather = data["weather"][0]["description"]
        if weather in code_to_smile:
            emodji_weather = code_to_smile[weather]
        else:
            emodji_weather = ""

        text = f'<strong>–ü–æ–≥–æ–¥–∞ {city}</strong>' \
               f'\n\n<i>–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {city}\n–°—Ç—Ä–∞–Ω–∞: {data["sys"]["country"]}</i>\n\n<strong>' \
               f'–ü–æ–≥–æ–¥–∞</strong>: <b>{data["weather"][0]["description"]}</b>{emodji_weather}' \
               f'\n\n<strong>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data["main"]["temp"]}</strong>' \
               f'\n<strong>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {data["main"]["feels_like"]}¬∞C</strong>' \
               f'\n\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:  {data["wind"]["speed"]} –º/—Å' \
               f'\n\n–î–∞–≤–ª–µ–Ω–∏–µ:  {data["main"]["pressure"]} –º–º.—Ä—Ç.—Å—Ç' \
               f'\n\n–í–ª–∞–∂–Ω–æ—Å—Ç—å:  {data["main"]["humidity"]} %'
        await bot.send_message(message.chat.id, text=text, parse_mode='HTML')
        if weather == "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å":
            photo = InputFile(f"–ø–æ–≥–æ–¥–∞ —Ä–∏—Å—É–Ω–∫–∏/–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è_–æ–±–ª–∞—á–Ω–æ—Å—Ç—å.jpg")
        elif weather == "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏":
            photo = InputFile(f"–ø–æ–≥–æ–¥–∞ —Ä–∏—Å—É–Ω–∫–∏/–æ–±–ª–∞—á–Ω–æ_—Å_–ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.jpg")
        elif weather == "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å":
            photo = InputFile(f"–ø–æ–≥–æ–¥–∞ —Ä–∏—Å—É–Ω–∫–∏/–Ω–µ–±–æ–ª—å—à–∞—è_–æ–±–ª–∞—á–Ω–æ—Å—Ç—å.jpg")
        else:
            photo = InputFile(f"–ø–æ–≥–æ–¥–∞ —Ä–∏—Å—É–Ω–∫–∏/{weather}.jpg")
        await bot.send_photo(chat_id=message.chat.id, photo=photo)
        # await state.set_state("start")


@dp.callback_query_handler(lambda callback: callback.data == "start_i2", state='location')
async def start_i1(callback_query: types.CallbackQuery, state):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è')
    await state.set_state("geolocation")


@dp.callback_query_handler(lambda callback: callback.data == "start_i1", state='location')
async def start_i1(callback_query: types.CallbackQuery, state):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª—é–±–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –∏ —è —Å–∫–∞–∂—É —Ç–µ–±–µ –ø–æ–≥–æ–¥—É —Ç–∞–º!')
    await state.set_state("location_point")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
